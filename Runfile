#!/bin/bash
set -euo pipefail

test.run() {
    local name=mesa
    docker rm -f $name || true
    # docker rmi containerized-gui-wayland
    docker build -t containerized-gui-wayland .
    docker run --privileged -dt \
        -v /dev/dri/card1:/dev/dri/card0 \
        -v /dev/null:/dev/dri/card1 \
        -v /dev/dri/renderD128:/dev/dri/renderD128 \
        -v /home/simpzan/:/home/simpzan/ \
        -p 8080:8080 \
        -v /home/simpzan/.ssh/:/home/app/.ssh \
        --pid=host \
        --name $name \
        containerized-gui-wayland
}
mesa.build() {
    # git checkout 4ee0a7e796547887344ded7526be0472db4c8d4e # 22.3.7
    cd /home/simpzan/mesa3d/
    mkdir -p tmp/
    rm -rf tmp/*
    local ogl=radeonsi
    local vk=amd; vk=
    meson setup tmp/ \
        -Dprefix=`pwd`/out \
        -Dvulkan-drivers=$vk \
        -Dgallium-drivers=$ogl \
        -Dgallium-vdpau=disabled \
        -Dgallium-va=disabled \
        -Dc_args="-gdwarf-4 -O1" \
        -Dcpp_args="-gdwarf-4 -O1"
    meson compile -C tmp/
    meson install -C tmp/
}
radv.run() {
    echo
    export WAYLAND_DISPLAY=wayland-0
    export VK_ICD_FILENAMES="out/share/vulkan/icd.d/radeon_icd.x86_64.json"
    killall vkcube-wayland || true
    sleep 1
    vulkaninfo
    vkcube-wayland &
    cat /proc/`pidof vkcube-wayland`/maps | grep r-xp
}
vkt.run() {
    export WAYLAND_DISPLAY=wayland-0
    export DISPLAY=:0
    export XDG_RUNTIME_DIR=/home/app/tmp
    export LD_LIBRARY_PATH=
    export LD_LIBRARY_PATH=/home/simpzan/repo/glfw/build/src/:$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH=/home/simpzan/repo/fftrace/libtrace/linux.x86_64/:$LD_LIBRARY_PATH
    export PATH=/usr/local/bin/:$PATH
    export VK_ICD_FILENAMES="/home/simpzan/mesa3d/out/share/vulkan/icd.d/radeon_icd.x86_64.json"
    cd /home/simpzan/VulkanTutorial/code/build/15_hello_triangle
    ./15_hello_triangle
}
LearnOpenGL.build() {
    # git clone https://github.com/JoeyDeVries/LearnOpenGL.git --depth=1
    cd /home/simpzan/LearnOpenGL
    rm -rf build bin
    mkdir -p build && cd build
    export CFLAGS="-gdwarf-4 -DNDEBUG=1"
    export CXXFLAGS="-gdwarf-4 -DNDEBUG=1"
    cmake .. -DCMAKE_BUILD_TYPE=Debug
    cmake --build . -t 1.getting_started__4.1.textures
}
LearnOpenGL.run() {
    export WAYLAND_DISPLAY=wayland-0
    export DISPLAY=:0
    export XDG_RUNTIME_DIR=/home/app/tmp
    export LD_LIBRARY_PATH=
    export LD_LIBRARY_PATH=/home/simpzan/repo/glfw/build/src/:$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH=/home/simpzan/repo/fftrace/libtrace/linux.x86_64/:$LD_LIBRARY_PATH
    export LD_LIBRARY_PATH="/home/simpzan/mesa3d/out/lib64/":$LD_LIBRARY_PATH
    # export WAYLAND_DEBUG=1
    glxinfo
    cd /home/simpzan/LearnOpenGL/bin/1.getting_started/
    ./1.getting_started__4.1.textures
}
VulkanTutorial.build() {
    set -x
    git clone https://github.com/Overv/VulkanTutorial.git --depth=1
    cd VulkanTutorial/
    # git checkout 1dbd594
    cd code
    mkdir -p build && cd build
    export CFLAGS="-gdwarf-4 -DNDEBUG=1"
    export CXXFLAGS="-gdwarf-4 -DNDEBUG=1"
    cmake .. -DCMAKE_BUILD_TYPE=Debug
    cmake --build . --verbose -t 15_hello_triangle
}
glfw.install() {
    git clone https://github.com/glfw/glfw.git -b 3.3.8
    cd glfw
    mkdir -p build
    cd build
    cmake .. -D GLFW_USE_WAYLAND=1 -D BUILD_SHARED_LIBS=ON
    make install
}

help() { echo "run, the minimalist's task runner - https://github.com/simpzan/run"; }
.tasks() { compgen -A function | grep -v "^\."; }
${@:-.tasks}
